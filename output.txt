

// Contents of src/PhysicsManager.cpp:
// PhysicsManager.cpp
#include "PhysicsManager.h"
#include "Constants.h"

// Constructor
PhysicsManager::PhysicsManager()
    : world(b2Vec2(0.0f, 0.0f)),
      timeStep(1.0f / 60.0f),
      velocityIterations(8),
      positionIterations(3),
      groundBody(nullptr)
{
    // Set the contact listener for collision detection
    world.SetContactListener(&contactListener);

    // Define the ground body
    b2BodyDef groundBodyDef;

    // Position the ground at the middle of the screen
    float groundScreenY = WINDOW_HEIGHT / 2.0f;
    float groundBox2DY = (WINDOW_HEIGHT - groundScreenY) / SCALE;
    groundBodyDef.position.Set(0.0f, groundBox2DY);
    groundBody = world.CreateBody(&groundBodyDef);

    // Define the ground shape (a horizontal line)
    b2PolygonShape groundBox;
    groundBox.SetAsBox(20.0f, 1.0f); // Half-width and half-height in Box2D units

    // Attach the shape to the body
    groundBody->CreateFixture(&groundBox, 0.0f);
}

// Define the applyGravity function
void PhysicsManager::applyGravity(const b2Vec2& gravity) {
    world.SetGravity(gravity);

    // Wake up all bodies in the world
    for (b2Body* body = world.GetBodyList(); body; body = body->GetNext()) {
        body->SetAwake(true);
    }
}


// Define the getWorld function
b2World& PhysicsManager::getWorld() {
    return world;
}

// Define the step function
void PhysicsManager::step() {
    world.Step(timeStep, velocityIterations, positionIterations);
}


// PhysicsManager.cpp
void PhysicsManager::renderGround(sf::RenderWindow& window) {
    float groundWidthBox2D = 40.0f;  // Total width in Box2D units
    float groundHeightBox2D = 2.0f;  // Total height in Box2D units

    float groundWidth = groundWidthBox2D * SCALE;
    float groundHeight = groundHeightBox2D * SCALE;

    sf::RectangleShape ground(sf::Vector2f(groundWidth, groundHeight));
    ground.setFillColor(sf::Color::Green);
    ground.setOrigin(groundWidth / 2.0f, groundHeight / 2.0f);

    // Get the ground body's position
    b2Vec2 position = groundBody->GetPosition();
    float x = position.x * SCALE + WINDOW_WIDTH / 2.0f;
    float y = WINDOW_HEIGHT - (position.y * SCALE);

    ground.setPosition(x, y);
    window.draw(ground);
}


// Contents of src/Boat.cpp:
#include "Boat.h"
#include "Constants.h"
#include <iostream>

Boat::Boat(b2World& world, const sf::Vector2f& position, const sf::Vector2f& size) {
    b2BodyDef bodyDef;
    bodyDef.type = b2_dynamicBody;
    bodyDef.position.Set((position.x - WINDOW_WIDTH / 2.0f) / SCALE, (WINDOW_HEIGHT - position.y) / SCALE);
    boatBody = world.CreateBody(&bodyDef);

    b2PolygonShape boatShape;
    boatShape.SetAsBox((size.x / 2.0f) / SCALE, (size.y / 2.0f) / SCALE);

    b2FixtureDef fixtureDef;
    fixtureDef.shape = &boatShape;
    fixtureDef.density = 1.0f;
    fixtureDef.friction = 0.3f;
    boatBody->CreateFixture(&fixtureDef);

    boatSprite.setSize(size);
    boatSprite.setOrigin(size.x / 2.0f, size.y / 2.0f);
    boatSprite.setFillColor(sf::Color::Blue);
}

void Boat::update() {
    b2Vec2 position = boatBody->GetPosition();
    float angle = boatBody->GetAngle();

    boatSprite.setPosition(position.x * SCALE + WINDOW_WIDTH / 2.0f, WINDOW_HEIGHT - (position.y * SCALE));
    boatSprite.setRotation(-angle * 180.0f / b2_pi);
}

void Boat::render(sf::RenderWindow& window) {
    window.draw(boatSprite);
}


// Contents of src/main.cpp:
#include <SFML/Graphics.hpp>
#include "Boat.h"
#include "PhysicsManager.h"
#include "Constants.h"
#include <SFML/System/Clock.hpp>
#include <iostream>

int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "Boat Out of Water");

    // Initialize physics manager
    PhysicsManager physicsManager;

    // Create boat
    Boat boat(physicsManager.getWorld(), sf::Vector2f(WINDOW_WIDTH / 2.0f, 100.0f), sf::Vector2f(40.0f, 20.0f));

    // Timer to track elapsed time
    sf::Clock clock;
    bool gravityApplied = false;

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Check elapsed time and apply gravity after 5 seconds
        if (!gravityApplied) {
            float elapsed = clock.getElapsedTime().asSeconds();
            std::cout << "Elapsed time: " << elapsed << " seconds" << std::endl;
            if (elapsed > 5.0f) {
                std::cout << "Applying gravity..." << std::endl;
                physicsManager.applyGravity(b2Vec2(0.0f, -9.8f)); // Apply gravity downward
                gravityApplied = true;
            }
        }

        // Update physics
        physicsManager.step();

        // Update boat
        boat.update();

        // Render
        window.clear();
        physicsManager.renderGround(window); // Draw the ground
        boat.render(window);                // Draw the boat
        window.display();
    }

    return 0;
}


// Contents of include/Boat.h:
#ifndef BOAT_H
#define BOAT_H

#include <SFML/Graphics.hpp>
#include <Box2D/Box2D.h>

class Boat {
public:
    Boat(b2World& world, const sf::Vector2f& position, const sf::Vector2f& size);
    void update();
    void render(sf::RenderWindow& window);

private:
    sf::RectangleShape boatSprite;
    b2Body* boatBody;
};

#endif // BOAT_H


// Contents of include/PhysicsManager.h:
// PhysicsManager.h
#ifndef PHYSICSMANAGER_H
#define PHYSICSMANAGER_H

#include <Box2D/Box2D.h>
#include <SFML/Graphics.hpp>
#include <iostream>

// Contact Listener for Collision Detection
class ContactListener : public b2ContactListener {
public:
    void BeginContact(b2Contact* contact) override {
        std::cout << "Collision detected!" << std::endl;
    }
};

class PhysicsManager {
public:
    PhysicsManager();
    b2World& getWorld();                     // Get reference to the Box2D world
    void step();                             // Update the Box2D simulation
    void renderGround(sf::RenderWindow& window); // Render the ground
    void applyGravity(const b2Vec2& gravity);

private:
    b2World world;                           // Box2D physics world
    float timeStep;                          // Time step for physics simulation
    int32 velocityIterations;               // Velocity solver iterations
    int32 positionIterations;               // Position solver iterations
    ContactListener contactListener;        // Contact listener for collision detection

    b2Body* groundBody;
};

#endif // PHYSICSMANAGER_H


// Contents of include/Constants.h:
// Constants.h

#ifndef CONSTANTS_H
#define CONSTANTS_H

constexpr float SCALE = 30.0f;
constexpr float WINDOW_HEIGHT = 600.0f;
constexpr float WINDOW_WIDTH = 800.0f;

#endif // CONSTANTS_H
