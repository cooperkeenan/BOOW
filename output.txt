

// Contents of src/PhysicsManager.cpp:
#include "PhysicsManager.h"
#include "Constants.h"
#include <iostream>

// Constructor
PhysicsManager::PhysicsManager()
    : world(b2Vec2(0.0f, 0.0f)),
      timeStep(1.0f / 60.0f),
      velocityIterations(8),
      positionIterations(3),
      groundBody(nullptr)
{
    // Define the ground body
    b2BodyDef groundBodyDef;
    groundBodyDef.position.Set(0.0f, 0.0f);
    groundBody = world.CreateBody(&groundBodyDef);

    // Generate curve vertices
    generateCurveVertices(100, -20.0f, 20.0f);

    // Use b2EdgeShape for the physics boundary
    for (size_t i = 0; i < curveVertices.size() - 1; ++i) {
        b2EdgeShape edge;
        edge.SetTwoSided(curveVertices[i], curveVertices[i + 1]); // Connect consecutive vertices

        b2FixtureDef edgeFixtureDef;
        edgeFixtureDef.shape = &edge;
        edgeFixtureDef.density = 0.0f;
        edgeFixtureDef.friction = 0.3f;
        edgeFixtureDef.restitution = 0.3f;
        groundBody->CreateFixture(&edgeFixtureDef);
    }
}

// Generate curve vertices
void PhysicsManager::generateCurveVertices(int numVertices, float startX, float endX) {
    curveVertices.resize(numVertices);
    float step = (endX - startX) / (numVertices - 1);

    for (int i = 0; i < numVertices; ++i) {
        float x = startX + i * step;
        float t = (float)i / (numVertices - 1); // Normalized [0, 1]
        float y = (WINDOW_HEIGHT / SCALE / 2.0f) + 5.0f * sinf(t * 2.0f * b2_pi) * cosf(t * b2_pi);
        curveVertices[i] = b2Vec2(x, y); // Save the vertex
    }
}

// Apply gravity
void PhysicsManager::applyGravity(const b2Vec2& gravity) {
    world.SetGravity(gravity);
    for (b2Body* body = world.GetBodyList(); body; body = body->GetNext()) {
        body->SetAwake(true);
    }
}

// Conditionally apply gravity
void PhysicsManager::applyGravityIfNeeded(bool& gravityApplied, float elapsedTime, float triggerTime) {
    if (!gravityApplied && elapsedTime > triggerTime) {
        applyGravity(b2Vec2(0.0f, -0.05f));
        gravityApplied = true;
    }
}

// Step the simulation
void PhysicsManager::step() {
    world.Step(timeStep, velocityIterations, positionIterations);
}

// Render the ground
void PhysicsManager::renderGround(sf::RenderWindow& window) {
    const int numVertices = curveVertices.size();
    sf::VertexArray groundShape(sf::LineStrip, numVertices);

    float offsetX = WINDOW_WIDTH / 2.0f; // Center X in pixels
    float offsetY = WINDOW_HEIGHT;      // Bottom Y in pixels

    for (int i = 0; i < numVertices; ++i) {
        groundShape[i].position = sf::Vector2f(
            curveVertices[i].x * SCALE + offsetX,
            offsetY - (curveVertices[i].y * SCALE)
        );
        groundShape[i].color = sf::Color::Green;
    }

    window.draw(groundShape);
}

// Get the Box2D world
b2World& PhysicsManager::getWorld() {
    return world;
}


// Contents of src/Boat.cpp:
#include "Boat.h"
#include "Constants.h"
#include <iostream>

// Helper function to convert SFML to Box2D coordinates
b2Vec2 sfmlToBox2D(const sf::Vector2f& position) {
    return b2Vec2((position.x - WINDOW_WIDTH / 2.0f) / SCALE, (WINDOW_HEIGHT - position.y) / SCALE);
}

Boat::Boat(b2World& world, const sf::Vector2f& position, const sf::Vector2f& size) {
    b2BodyDef bodyDef;
    bodyDef.type = b2_dynamicBody;
    bodyDef.position = sfmlToBox2D(position);
    boatBody = world.CreateBody(&bodyDef);

    b2PolygonShape boatShape;
    boatShape.SetAsBox((size.x / 2.0f) / SCALE, (size.y / 2.0f) / SCALE);

    b2FixtureDef fixtureDef;
    fixtureDef.shape = &boatShape;
    fixtureDef.density = 1.0f;
    fixtureDef.friction = 0.007f;
    fixtureDef.restitution = 0.5f;
    boatBody->CreateFixture(&fixtureDef);

    boatSprite.setSize(size);
    boatSprite.setOrigin(size.x / 2.0f, size.y / 2.0f);
    boatSprite.setFillColor(sf::Color::Blue);
}

void Boat::update() {
    b2Vec2 position = boatBody->GetPosition();
    float angle = boatBody->GetAngle();

    boatSprite.setPosition(position.x * SCALE + WINDOW_WIDTH / 2.0f, WINDOW_HEIGHT - (position.y * SCALE));
    boatSprite.setRotation(-angle * 180.0f / b2_pi);
}

void Boat::render(sf::RenderWindow& window) {
    window.draw(boatSprite);
}

void Boat::move(const b2Vec2& force) {
    boatBody->ApplyForceToCenter(force, true);
}

void Boat::move(float directionX, float directionY, float magnitude) {
    b2Vec2 force(directionX * magnitude, directionY * magnitude);
    boatBody->ApplyForceToCenter(force, true);
}


// Contents of src/main.cpp:
#include <SFML/Graphics.hpp>
#include "Boat.h"
#include "PhysicsManager.h"
#include "Constants.h"
#include <SFML/System/Clock.hpp>
#include <iostream>

int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "Boat Out of Water");

    // Initialize physics manager
    PhysicsManager physicsManager;

    // Create boat
    Boat boat(physicsManager.getWorld(), sf::Vector2f(WINDOW_WIDTH / 2.0f, 100.0f), sf::Vector2f(40.0f, 20.0f));

    sf::Clock clock;
    bool gravityApplied = false;

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Controls
        float directionX = 0.0f, directionY = 0.0f;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) directionY = 1.0f;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) directionX = -0.8f;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)) directionX = 0.8f;

        boat.move(directionX, directionY, 1.0f);

        // Apply gravity after 2 seconds
        physicsManager.applyGravityIfNeeded(gravityApplied, clock.getElapsedTime().asSeconds(), 2.0f);

        // Update physics and render
        physicsManager.step();
        boat.update();

        window.clear();
        physicsManager.renderGround(window);
        boat.render(window);
        window.display();
    }

    return 0;
}


// Contents of include/Boat.h:
#ifndef BOAT_H
#define BOAT_H

#include <SFML/Graphics.hpp>
#include <Box2D/Box2D.h>

class Boat {
public:
    Boat(b2World& world, const sf::Vector2f& position, const sf::Vector2f& size);
    void update();
    void render(sf::RenderWindow& window);
    void move(const b2Vec2& force);
    void move(float directionX, float directionY, float magnitude);

private:
    sf::RectangleShape boatSprite;
    b2Body* boatBody;
};

#endif // BOAT_H


// Contents of include/PhysicsManager.h:
#ifndef PHYSICSMANAGER_H
#define PHYSICSMANAGER_H

#include <Box2D/Box2D.h>
#include <SFML/Graphics.hpp>
#include <vector>

class PhysicsManager {
public:
    PhysicsManager();
    b2World& getWorld();
    void step();
    void applyGravity(const b2Vec2& gravity);
    void applyGravityIfNeeded(bool& gravityApplied, float elapsedTime, float triggerTime);
    void renderGround(sf::RenderWindow& window);

private:
    void generateCurveVertices(int numVertices, float startX, float endX);

    b2World world;                        
    float timeStep;                       
    int32 velocityIterations;             
    int32 positionIterations;             
    b2Body* groundBody;                   
    std::vector<b2Vec2> curveVertices;    
};

#endif // PHYSICSMANAGER_H


// Contents of include/Constants.h:
// Constants.h

#ifndef CONSTANTS_H
#define CONSTANTS_H

constexpr float SCALE = 10.0f;
constexpr float WINDOW_HEIGHT = 600.0f;
constexpr float WINDOW_WIDTH = 800.0f;

#endif // CONSTANTS_H
